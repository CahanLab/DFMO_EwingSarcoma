meta_tab$PDX_id = str_split_fixed(rownames(meta_tab), "_", n = 2)[, 1]
# filling in the below based on email patrick sent
meta_tab$treated = 'control'
meta_tab[grep("E", meta_tab$PDX_id), 'treated'] = 'DFMO'
meta_tab$gender = 'male'
meta_tab[meta_tab$PDX_id %in% c("E1", "E3", 'E4', 'C3'), 'gender'] = 'female'
meta_tab$days = 0
meta_tab[meta_tab$PDX_id %in% c('E1', 'E3'), 'days'] = 47
meta_tab[meta_tab$PDX_id %in% c('E4'), 'days'] = 40
meta_tab[meta_tab$PDX_id %in% c('E6'), 'days'] = 64
meta_tab$type = NA
meta_tab[grep("C", meta_tab$PDX_id), 'type'] = 'control'
meta_tab[grep("E", meta_tab$PDX_id), 'type'] = 'treated'
meta_tab[grep("L", meta_tab$PDX_id), 'type'] = 'late-treated'
View(meta_tab)
# start DE analysis
# start with the human transcripts
mouse_counts = compiled_df[grep("ENSMUST", rownames(compiled_df)), ]
human_counts = compiled_df[grep("ENST", rownames(compiled_df)), ]
saveRDS(mouse_counts, file = 'output/DFMO_control_counts/mouse_counts.rds')
dir.create("../output/DFMO_control_counts/")
saveRDS(mouse_counts, file = '../output/DFMO_control_counts/mouse_counts.rds')
saveRDS(human_counts, file = '../output/DFMO_control_counts/human_counts.rds')
write.csv(meta_tab, file = '../output/DFMO_control_counts/meta_tab.csv')
stats_tab = data.frame('human_reads' = format(apply(human_counts, MARGIN = 2, FUN = sum), scientific = TRUE),
'mouse_reads' = format(apply(mouse_counts, MARGIN = 2, FUN = sum), scientific = TRUE))
stats_tab
write.csv(stats_tab, file = '../output/DFMO_control_counts/reads_num_counts.csv')
##### find ways to convert the ensemble transcripts into genes ######
# load in the ensemble transcript to gene converting table
header_tab = read.csv("../input/DFMO_control_alignment/reference_genomes/hg38_mm10_header.txt", sep = ' ', header = FALSE)
header_tab = header_tab[, c(1, 7)]
colnames(header_tab) = c("ensembl_id", 'gene_id')
header_tab$ensembl_id = str_remove_all(header_tab$ensembl_id, ">")
header_tab$gene_id = str_remove_all(header_tab$gene_id, 'gene_symbol:')
header_tab = header_tab[header_tab$ensembl_id %in% rownames(compiled_df), ]
rownames(header_tab) = header_tab$ensembl_id
##### perform DEseq2 #####
# calculate using just human counts
dds <- DESeqDataSetFromMatrix(countData=human_counts,
colData=meta_tab,
design=~treated, tidy = FALSE)
keep = rowSums(counts(dds) >= 100) >= 3
dds = dds[keep, ]
dds <- DESeq(dds)
dir.create("../output/DFMO_control_counts/human_DE_analysis")
withr::with_dir('../output/DFMO_control_counts/human_DE_analysis', {
norm_counts = counts(dds, normalize = TRUE)
rownames(norm_counts) = header_tab[rownames(norm_counts), 'gene_id']
write.csv(norm_counts, file = 'human_norm_exp.csv')
saveRDS(dds, file = 'human_DESeq2_object.rds')
})
res <- results(dds)
res_df = as.data.frame(res)
res_df = res_df[complete.cases(res_df), ]
DFMO_up = res_df[res_df$log2FoldChange > 0, ]
DFMO_up = DFMO_up[DFMO_up$padj < 0.05, ]
DFMO_up$gene = header_tab[rownames(DFMO_up), 'gene_id']
library(ggplot2)
library(DESeq2)
library(stringr)
library(biomaRt)
library(enrichR)
# get all the samples from DFMO v control quantification
all_samples = list.dirs("../input/DFMO_control_alignment/quants/", recursive = FALSE, full.names = FALSE)
###### compile all the raw counts into matrix ######
compiled_df = data.frame()
for(samp_name in all_samples) {
temp_read = read.csv(file.path("../input/DFMO_control_alignment/quants/", samp_name, 'quant.sf'), sep = '\t')
temp_df = data.frame(row.names = temp_read$Name,
'counts' = round(temp_read$NumReads))
colnames(temp_df) = stringr::str_remove(samp_name, "_L001_quant")
if(nrow(compiled_df) == 0) {
compiled_df = temp_df
} else {
compiled_df = merge(compiled_df, temp_df, by = 'row.names')
rownames(compiled_df) = compiled_df$Row.names
compiled_df$Row.names = NULL
}
}
# construct meta table
meta_tab = data.frame(row.names = colnames(compiled_df),
'sequence_id' = colnames(compiled_df))
meta_tab$PDX_id = str_split_fixed(rownames(meta_tab), "_", n = 2)[, 1]
# filling in the below based on email patrick sent
meta_tab$treated = 'control'
meta_tab[grep("E", meta_tab$PDX_id), 'treated'] = 'DFMO'
meta_tab$gender = 'male'
meta_tab[meta_tab$PDX_id %in% c("E1", "E3", 'E4', 'C3'), 'gender'] = 'female'
meta_tab$days = 0
meta_tab[meta_tab$PDX_id %in% c('E1', 'E3'), 'days'] = 47
meta_tab[meta_tab$PDX_id %in% c('E4'), 'days'] = 40
meta_tab[meta_tab$PDX_id %in% c('E6'), 'days'] = 64
meta_tab$type = NA
meta_tab[grep("C", meta_tab$PDX_id), 'type'] = 'control'
meta_tab[grep("E", meta_tab$PDX_id), 'type'] = 'treated'
meta_tab[grep("L", meta_tab$PDX_id), 'type'] = 'late-treated'
# start DE analysis
# start with the human transcripts
mouse_counts = compiled_df[grep("ENSMUST", rownames(compiled_df)), ]
human_counts = compiled_df[grep("ENST", rownames(compiled_df)), ]
dir.create("../output/DFMO_control_analyis/human_mouse_counts")
saveRDS(mouse_counts, file = '../output/DFMO_control_analyis/human_mouse_counts/mouse_counts.rds')
dir.create("../output/DFMO_control_analyis/human_mouse_counts", recursive = TRUE)
saveRDS(mouse_counts, file = '../output/DFMO_control_analyis/human_mouse_counts/mouse_counts.rds')
saveRDS(human_counts, file = '../output/DFMO_control_analyis/human_mouse_counts/human_counts.rds')
write.csv(meta_tab, file = '../output/DFMO_control_analyis/human_mouse_counts/meta_tab.csv')
stats_tab = data.frame('human_reads' = format(apply(human_counts, MARGIN = 2, FUN = sum), scientific = TRUE),
'mouse_reads' = format(apply(mouse_counts, MARGIN = 2, FUN = sum), scientific = TRUE))
write.csv(stats_tab, file = '../output/DFMO_control_analyis/human_mouse_counts/reads_num_counts.csv')
##### find ways to convert the ensemble transcripts into genes ######
# load in the ensemble transcript to gene converting table
header_tab = read.csv("../input/DFMO_control_alignment/reference_genomes/hg38_mm10_header.txt", sep = ' ', header = FALSE)
header_tab = header_tab[, c(1, 7)]
colnames(header_tab) = c("ensembl_id", 'gene_id')
header_tab$ensembl_id = str_remove_all(header_tab$ensembl_id, ">")
header_tab$gene_id = str_remove_all(header_tab$gene_id, 'gene_symbol:')
header_tab = header_tab[header_tab$ensembl_id %in% rownames(compiled_df), ]
rownames(header_tab) = header_tab$ensembl_id
##### perform DEseq2 #####
# calculate using just human counts
dds <- DESeqDataSetFromMatrix(countData=human_counts,
colData=meta_tab,
design=~treated, tidy = FALSE)
keep = rowSums(counts(dds) >= 100) >= 3
dds = dds[keep, ]
dds <- DESeq(dds)
###### perform analysis of DEseq2 results #####
dir.create("../output/DFMO_control_analyis/human_DE_analysis")
withr::with_dir('../output/DFMO_control_analyis/human_DE_analysis', {
norm_counts = counts(dds, normalize = TRUE)
rownames(norm_counts) = header_tab[rownames(norm_counts), 'gene_id']
write.csv(norm_counts, file = 'human_norm_exp.csv')
saveRDS(dds, file = 'human_DESeq2_object.rds')
})
res <- results(dds)
res_df = as.data.frame(res)
res_df = res_df[complete.cases(res_df), ]
DFMO_up = res_df[res_df$log2FoldChange > 0, ]
DFMO_up = DFMO_up[DFMO_up$padj < 0.05, ]
DFMO_up$gene = header_tab[rownames(DFMO_up), 'gene_id']
enrichR::setEnrichrSite('Enrichr')
databases = c('GO_Biological_Process_2021', 'GO_Molecular_Function_2021','KEGG_2021_Human', 'WikiPathway_2021_Human', 'Reactome_2016', 'BioCarta_2016', 'MSigDB_Hallmark_2020')
enrichment_analysis = enrichR::enrichr(DFMO_up$gene, databases)
dir.create("../output/DFMO_control_analyis/human_DE_analysis/DFMO_genes")
withr::with_dir('../output/DFMO_control_analyis/human_DE_analysis/DFMO_genes', {
write.csv(DFMO_up, file = 'human_DFMO_up_genes.csv')
saveRDS(enrichment_analysis, file = 'DFMO_enrichment_analysis.rds')
for(analysis_name in names(enrichment_analysis)) {
temp_df = enrichment_analysis[[analysis_name]]
temp_df = temp_df[temp_df$Adjusted.P.value < 0.05, ]
write.csv(temp_df, paste0(analysis_name, "_enrichment_analysis.csv"))
plot_df = data.frame("category" = temp_df$Term,
'log_adj_p' = -log(temp_df$Adjusted.P.value))
plot_df = plot_df[order(plot_df$log_adj_p, decreasing = TRUE), ]
p<-ggplot(data=plot_df, aes(x=reorder(category, log_adj_p), y=log_adj_p)) +
geom_bar(stat="identity") +
ylab("-log adj-p") +
xlab("Terms")+
ggtitle(analysis_name) +
theme_bw() +
coord_flip()
ggsave(filename = paste0("significant_terms_", analysis_name, '.png'), width = 12, height = 10)
}
})
dir.create("../output/DFMO_control_analyis/human_DE_analysis/control_genes")
DFMO_down = res_df[res_df$log2FoldChange < 0, ]
DFMO_down = DFMO_down[DFMO_down$padj < 0.05, ]
DFMO_down$gene = header_tab[rownames(DFMO_down), 'gene_id']
enrichment_analysis = enrichR::enrichr(DFMO_down$gene, databases)
withr::with_dir('../output/DFMO_control_analyis/human_DE_analysis/control_genes', {
write.csv(DFMO_down, file = 'human_control_up_genes.csv')
saveRDS(enrichment_analysis, file = 'control_enrichment_analysis.rds')
for(analysis_name in names(enrichment_analysis)) {
temp_df = enrichment_analysis[[analysis_name]]
temp_df = temp_df[temp_df$Adjusted.P.value < 0.05, ]
write.csv(temp_df, paste0(analysis_name, "_enrichment_analysis.csv"))
plot_df = data.frame("category" = temp_df$Term,
'log_adj_p' = -log(temp_df$Adjusted.P.value))
plot_df = plot_df[order(plot_df$log_adj_p, decreasing = TRUE), ]
p<-ggplot(data=plot_df, aes(x=reorder(category, log_adj_p), y=log_adj_p)) +
geom_bar(stat="identity") +
ylab("-log adj-p") +
xlab("Terms")+
ggtitle(analysis_name) +
theme_bw() +
coord_flip()
ggsave(filename = paste0("significant_terms_", analysis_name, '.png'), width = 12, height = 10)
}
})
###### this is for the mouse counts data ######
dds <- DESeqDataSetFromMatrix(countData=mouse_counts,
colData=meta_tab,
design=~treated, tidy = FALSE)
keep = rowSums(counts(dds) >= 100) >= 3
dds = dds[keep, ]
dds <- DESeq(dds)
dir.create("../output/DFMO_control_analyis/mouse_DE_analysis")
withr::with_dir('../output/DFMO_control_analyis/mouse_DE_analysis', {
norm_counts = counts(dds, normalize = TRUE)
rownames(norm_counts) = header_tab[rownames(norm_counts), 'gene_id']
write.csv(norm_counts, file = 'mouse_norm_exp.csv')
saveRDS(dds, file = 'mouse_DESeq2_object.rds')
})
dds = readRDS("../output/DFMO_control_analyis/mouse_DE_analysis/mouse_DESeq2_object.rds")
res <- results(dds)
res_df = as.data.frame(res)
res_df = res_df[complete.cases(res_df), ]
DFMO_up = res_df[res_df$log2FoldChange > 0, ]
DFMO_up = DFMO_up[DFMO_up$padj < 0.05, ]
DFMO_up$gene = header_tab[rownames(DFMO_up), 'gene_id']
databases = c('KEGG_2019_Mouse', 'WikiPathways_2019_Mouse', 'Mouse_Gene_Atlas', 'GO_Biological_Process_2021')
enrichment_analysis = enrichR::enrichr(DFMO_up$gene, databases)
enrichment_df = enrichment_analysis$Mouse_Gene_Atlas
dir.create("../output/DFMO_control_analyis/mouse_DE_analysis/DFMO_genes")
withr::with_dir('../output/DFMO_control_analyis/mouse_DE_analysis/DFMO_genes', {
write.csv(DFMO_up, file = 'mouse_DFMO_up_genes.csv')
saveRDS(enrichment_analysis, file = 'DFMO_enrichment_analysis.rds')
for(analysis_name in names(enrichment_analysis)) {
temp_df = enrichment_analysis[[analysis_name]]
temp_df = temp_df[temp_df$Adjusted.P.value < 0.05, ]
write.csv(temp_df, paste0(analysis_name, "_enrichment_analysis.csv"))
plot_df = data.frame("category" = temp_df$Term,
'log_adj_p' = -log(temp_df$Adjusted.P.value))
plot_df = plot_df[order(plot_df$log_adj_p, decreasing = TRUE), ]
plot_df = plot_df[1:20, ]
plot_df = plot_df[complete.cases(plot_df), ]
p<-ggplot(data=plot_df, aes(x=reorder(category, log_adj_p), y=log_adj_p)) +
geom_bar(stat="identity") +
ylab("-log adj-p") +
xlab("Terms")+
ggtitle(analysis_name) +
theme_bw() +
coord_flip()
ggsave(filename = paste0("significant_terms_", analysis_name, '.png'), width = 12, height = 14)
}
})
# this is for genesets that are down regulated by DFMO
DFMO_down = res_df[res_df$log2FoldChange < 0, ]
DFMO_down = DFMO_down[DFMO_down$padj < 0.05, ]
DFMO_down$gene = header_tab[rownames(DFMO_down), 'gene_id']
enrichment_analysis = enrichR::enrichr(DFMO_down$gene, databases)
dir.create("../output/DFMO_control_analyis/mouse_DE_analysis/control_genes")
withr::with_dir('../output/DFMO_control_analyis/mouse_DE_analysis/control_genes', {
write.csv(DFMO_down, file = 'mouse_control_up_genes.csv')
saveRDS(enrichment_analysis, file = 'control_enrichment_analysis.rds')
for(analysis_name in names(enrichment_analysis)) {
temp_df = enrichment_analysis[[analysis_name]]
temp_df = temp_df[temp_df$Adjusted.P.value < 0.05, ]
write.csv(temp_df, paste0(analysis_name, "_enrichment_analysis.csv"))
plot_df = data.frame("category" = temp_df$Term,
'log_adj_p' = -log(temp_df$Adjusted.P.value))
plot_df = plot_df[order(plot_df$log_adj_p, decreasing = TRUE), ]
plot_df = plot_df[1:15, ]
plot_df = plot_df[complete.cases(plot_df), ]
p<-ggplot(data=plot_df, aes(x=reorder(category, log_adj_p), y=log_adj_p)) +
geom_bar(stat="identity") +
ylab("-log adj-p") +
xlab("Terms")+
ggtitle(analysis_name) +
theme_bw() +
coord_flip()
ggsave(filename = paste0("significant_terms_", analysis_name, '.png'), width = 12, height = 10)
}
})
library(ggplot2)
library(DESeq2)
library(stringr)
library(biomaRt)
library(enrichR)
library(amap)
human_dds = readRDS('../output/DFMO_control_analyis/human_DE_analysis/human_DESeq2_object.rds')
human_counts = counts(human_dds, normalized=TRUE)
my_correlation = Dist(t(human_counts), method = "pearson", nbproc = 2, diag = FALSE, upper = FALSE)
clusters <- hclust(my_correlation, method = 'average')
plot(clusters)
library(ggplot2)
library(DESeq2)
library(amap)
dds = readRDS("../output/DFMO_control_analyis/human_DE_analysis/human_DESeq2_object.rds")
human_counts = counts(dds, normalized = TRUE)
human_meta = read.csv("meta_tab.csv", row.names = 1)
human_meta$id = NA
human_counts = counts(dds, normalized = TRUE)
human_meta = read.csv("../output/DFMO_control_analyis/human_mouse_counts/meta_tab.csv", row.names = 1)
human_meta$id = NA
human_meta[human_meta$treated == 'DFMO', 'id'] = paste0("DFMO", seq(1, 4))
human_meta[human_meta$treated == 'control', 'id'] = paste0("control", seq(1, 6))
variance_gene = apply(human_counts, FUN = var, MARGIN = 1)
variance_gene = sort(variance_gene, decreasing = TRUE)
filtered_counts = human_counts[names(variance_gene[1:2000]), ]
PCA_coord = prcomp(t(filtered_counts))
PCA_coord = PCA_coord[['x']]
PCA_coord = as.data.frame(PCA_coord)
human_meta = human_meta[rownames(PCA_coord), ]
rownames(PCA_coord) = human_meta$id
PCA_coord$sample = human_meta$treated
PCA_coord$id = human_meta$id
p = ggplot(PCA_coord, aes(x=PC1, y=PC2, color = sample)) +
geom_point(size = 4) +
geom_text(
label=rownames(PCA_coord),
color = 'black',
nudge_x = 0, vjust = -0.9,
check_overlap = T
) +
scale_colour_brewer(palette = 'Set2') +
theme_bw() +
theme(axis.text = element_blank(), text = element_text(size = 20))
p
ggsave("../output/DFMO_control_analyis/human_DE_analysis/PCA_plot.png", plot = p, height = 5, width = 8)
library(factoextra)
##### plot out clustering (NOT USED IN MANUSCRIPT) ######
human_counts = human_counts[, rownames(human_meta)]
colnames(human_counts) = human_meta$id
my_correlation = Dist(t(human_counts), method = "pearson", nbproc = 2, diag = FALSE, upper = FALSE)
clusters <- hclust(my_correlation, method = 'average')
p = fviz_dend(clusters, k = 3,                 # Cut in four groups
cex = 0.5,                 # label size
k_colors = c(RColorBrewer::brewer.pal(3, 'Set2')[1], RColorBrewer::brewer.pal(3, 'Set2')[2], RColorBrewer::brewer.pal(3, 'Set2')[1]),
color_labels_by_k = FALSE,  # color labels by groups
ggtheme = theme_minimal()     # Change theme
)
p = p + ylab("Height") +
ggtitle("Hierarchal Clustering ") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p
ggsave("../output/DFMO_control_analyis/human_DE_analysis/human_DE_analysis/clustering.png", plot = p, height = 4, width = 6)
ggsave("../output/DFMO_control_analyis/human_DE_analysis/clustering.png", plot = p, height = 4, width = 6)
library(ggplot2)
enrichment_results = read.csv("../output/DFMO_control_analyis/human_DE_analysis/control_genes/Reactome_2016_enrichment_analysis.csv", row.names = 1)
enrichment_results = enrichment_results[1:40, ]
plot_df = data.frame("category" = enrichment_results$Term,
'log_adj_p' = -log(enrichment_results$Adjusted.P.value))
plot_df = plot_df[order(plot_df$log_adj_p, decreasing = TRUE), ]
plot_df$category = stringr::str_remove_all(plot_df$category, " Homo sapiens.*")
#plot_df = plot_df[1:20, ]
plot_df = plot_df[complete.cases(plot_df), ]
plot_df$color = 'black'
blue_list = c("Cell Cycle, Mitotic",
"Cell Cycle",
"Mitotic G1-G1/S phases",
"Activation of ATR in response to replication stress",
"S Phase",
"G1/S Transition",
"M/G1 Transition",
"Regulation of DNA replication",
"G2/M Checkpoints")
plot_df[plot_df$category %in% blue_list, 'color'] = 'blue'
red_list = c("Cholesterol biosynthesis",
"Regulation of cholesterol biosynthesis by SREBP (SREBF)",
"Activation of gene expression by SREBF (SREBP)",
"Metabolism of lipids and lipoproteins")
plot_df[plot_df$category %in% red_list, 'color'] = 'red'
yellow_list = c("Apoptotic cleavage of cellular proteins",
"Apoptotic execution  phase",
"Apoptosis")
plot_df[plot_df$category %in% yellow_list, 'color'] = 'yellow'
p<-ggplot(data=plot_df, aes(x=reorder(category, log_adj_p), y=log_adj_p)) +
geom_bar(stat="identity") +
ylab("-log adj-p") +
xlab("Terms")+
ggtitle('Enriched in Control') +
theme_bw() +
theme(text = element_text(size = 20)) +
coord_flip()
ggsave("../output/DFMO_control_analyis/human_DE_analysis/enrichr_black.png", plot = p, height = 9.5, width = 12)
p<-ggplot(data=plot_df, aes(x=reorder(category, log_adj_p), y=log_adj_p, fill = color)) +
geom_bar(stat="identity") +
ylab("-log adj-p") +
xlab("Terms")+
ggtitle('Enriched in Control') +
scale_fill_manual(values=c("#999999", "#2E9FDF", "#FC4E07", "#E7B800")) +
theme_bw() +
theme(text = element_text(size = 20), legend.position = 'none') +
coord_flip()
ggsave("../output/DFMO_control_analyis/human_DE_analysis/enrichr_color.png", plot = p, height = 9.5, width = 12)
sub_plot_df = plot_df[plot_df$color != 'black', ]
p<-ggplot(data=sub_plot_df, aes(x=reorder(category, log_adj_p), y=log_adj_p)) +
geom_bar(stat="identity") +
ylab("-log adj-p") +
xlab("Terms")+
ggtitle('Enriched in Control') +
theme_bw() +
theme(text = element_text(size = 20)) +
coord_flip()
ggsave("../output/DFMO_control_analyis/human_DE_analysis/selected_enrichr_black.png", plot = p, height = 9.5, width = 12)
p<-ggplot(data=sub_plot_df, aes(x=reorder(category, log_adj_p), y=log_adj_p, fill = color)) +
geom_bar(stat="identity") +
ylab("-log adj-p") +
xlab("Terms")+
ggtitle('Enriched in Control') +
scale_fill_manual(values=c("#2E9FDF", "#FC4E07", "#E7B800")) +
theme_bw() +
theme(text = element_text(size = 20), legend.position = 'none') +
coord_flip()
ggsave("../output/DFMO_control_analyis/human_DE_analysis/selected_enrichr_color.png", plot = p, height = 9.5, width = 12)
library(DESeq2)
library(stringr)
library(ggplot2)
header_tab = read.csv("../input/DFMO_control_alignment/reference_genomes/hg38_mm10_header.txt", sep = ' ', header = FALSE)
header_tab = header_tab[, c(1, 7)]
colnames(header_tab) = c("ensembl_id", 'gene_id')
header_tab$ensembl_id = str_remove_all(header_tab$ensembl_id, ">")
header_tab$gene_id = str_remove_all(header_tab$gene_id, 'gene_symbol:')
dds = readRDS("../output/DFMO_control_analyis/human_DE_analysis/human_DESeq2_object.rds")
res <- results(dds)
header_tab = header_tab[header_tab$ensembl_id %in% rownames(res), ]
rownames(header_tab) = header_tab$ensembl_id
rownames(res) = header_tab[rownames(res), 'gene_id']
res_df = data.frame(res)
res_df$log10_padj = -log10(res_df$padj)
res_df$genes = rownames(res_df)
res_df$Type = NA
res_df[res_df$log2FoldChange > 0, 'Type'] = 'Up in DFMO'
res_df[res_df$log2FoldChange < 0, 'Type'] = 'Up in control'
gene_sets = read.csv("../input/ferroptosis_metabolic_genesets//ferroptosis.txt", header = FALSE)
gene_sets = gene_sets$V1
gene_sets = intersect(gene_sets, rownames(res))
sub_res_df = res_df[gene_sets, ]
p<-ggplot(data=sub_res_df, aes(x=reorder(genes, abs(log10_padj)), y=log10_padj, fill = Type)) +
geom_bar(stat="identity") + coord_flip() + geom_hline(yintercept = -log10(0.5)) + theme_bw() +
xlab('ferroptosis genes') +
ylab('-log10 adj p-value') +
scale_fill_brewer(palette = 'Set2') +
ggtitle('ferroptosis genes') +
theme(text = element_text(size = 20))
p
p<-ggplot(data=sub_res_df, aes(x=reorder(genes, abs(log10_padj)), y=log10_padj, fill = Type)) +
geom_bar(stat="identity") + coord_flip() + geom_hline(yintercept = -log10(0.5)) + theme_bw() +
xlab('ferroptosis genes') +
ylab('-log10 adj p-value') +
scale_fill_brewer(palette = 'Set2') +
ggtitle('ferroptosis genes') +
theme(text = element_text(size = 20))
p
ggsave(filename = '../output/DFMO_control_analyis/human_DE_analysis/ferroptosis_genes_bar.png', width = 7, height = 6)
p<-ggplot(data=sub_res_df, aes(x=reorder(genes, abs(log2FoldChange)), y=log2FoldChange, fill = Type)) +
geom_bar(stat="identity") + coord_flip() + theme_bw() +
xlab('ferroptosis genes') +
ylab('log2fold Change') +
ggtitle('ferroptosis genes') +
theme(text = element_text(size = 20)) +
scale_fill_brewer(palette = 'Set2')
p
p<-ggplot(data=sub_res_df, aes(x=reorder(genes, abs(log2FoldChange)), y=log2FoldChange, fill = Type)) +
geom_bar(stat="identity") + coord_flip() + theme_bw() +
xlab('ferroptosis genes') +
ylab('log2fold Change') +
ggtitle('ferroptosis genes') +
theme(text = element_text(size = 20)) +
scale_fill_brewer(palette = 'Set2')
ggsave(filename = '../output/DFMO_control_analyis/human_DE_analysis/ferroptosis_genes_bar_log2Fold.png', width = 7, height = 6)
##### look at metabolic genes again #####
gene_sets = read.csv("../input/ferroptosis_metabolic_genesets/metabolic.txt", header = FALSE)
gene_sets = gene_sets$V1
gene_sets = intersect(gene_sets, rownames(res))
sub_res_df = res_df[gene_sets, ]
p<-ggplot(data=sub_res_df, aes(x=reorder(genes, abs(log10_padj)), y=log10_padj, fill = Type)) +
geom_bar(stat="identity") + coord_flip() + geom_hline(yintercept = -log10(0.5)) + theme_bw() +
xlab('metabolic genes') +
ylab('-log10 adj p-value') +
ggtitle('metabolic genes')
p
##### look at metabolic genes #####
gene_sets = read.csv("../input/ferroptosis_metabolic_genesets/metabolic.txt", header = FALSE)
gene_sets = gene_sets$V1
gene_sets = intersect(gene_sets, rownames(res))
sub_res_df = res_df[gene_sets, ]
p<-ggplot(data=sub_res_df, aes(x=reorder(genes, abs(log10_padj)), y=log10_padj, fill = Type)) +
geom_bar(stat="identity") + coord_flip() + geom_hline(yintercept = -log10(0.5)) + theme_bw() +
xlab('metabolic genes') +
ylab('-log10 adj p-value') +
ggtitle('metabolic genes')
p
ggsave(filename = '../output/DFMO_control_analyis/human_DE_analysis/metabolic_genes_bar.png', width = 8, height = 6)
p<-ggplot(data=sub_res_df, aes(x=reorder(genes, abs(log2FoldChange)), y=log2FoldChange, fill = Type)) +
geom_bar(stat="identity") + coord_flip() +
xlab('metabolic genes') +
ylab('log2fold Change') +
ggtitle('metabolic genes')
p<-ggplot(data=sub_res_df, aes(x=reorder(genes, abs(log2FoldChange)), y=log2FoldChange, fill = Type)) +
geom_bar(stat="identity") + coord_flip() +
xlab('metabolic genes') +
ylab('log2fold Change') +
ggtitle('metabolic genes')
ggsave(filename = '../output/DFMO_control_analyis/metabolic_genes_bar_log2Fold.png', width = 8, height = 6)
##### look at the genes individually ######
human_counts = read.csv("../output/DFMO_control_analyis/human_DE_analysis/human_norm_exp.csv")
human_counts = human_counts[!duplicated(human_counts$X), ]
rownames(human_counts) = human_counts$X
human_counts$X = NULL
meta_tab = read.csv("../output/DFMO_control_analyis/human_mouse_counts/meta_tab.csv", row.names = 1)
make_plot <- function(exp_df, meta_tab, gene_interest) {
exp_df = exp_df[, rownames(meta_tab)]
plot_df = data.frame("type" = meta_tab$treated,
"norm_exp" = unlist(exp_df[gene_interest, ]))
p = ggplot(plot_df, aes(x=type, y=norm_exp, fill = type)) +
geom_boxplot()+
scale_fill_brewer(palette="Set2") +
theme_classic() +
ggtitle(gene_interest)
return(p)
}
gene_interest = 'IDH1'
plot = make_plot(human_counts, meta_tab, gene_interest)
plot
gene_interest = 'HMGCR'
make_plot(human_counts, meta_tab, gene_interest)
human_counts = readRDS("../output/DFMO_control_analyis/human_mouse_counts/human_counts.rds")
write.table(human_counts, file = '../output/DFMO_control_analyis/human_mouse_counts/human_counts.txt', quote = FALSE)
write.csv(human_counts, file = '../output/DFMO_control_analyis/human_mouse_counts/human_counts.csv', quote = FALSE)
